//-------------------------------------------------------------------------------
// Copyright (c) 2013 Peter Weidenkaff.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the GNU Public License v3.0
// which accompanies this distribution, and is available at
// http://www.gnu.org/licenses/gpl.html
//
// Contributors:
//     Peter Weidenkaff - initial API
//-------------------------------------------------------------------------------

//! PhysConst provides particle information to the framework
/*!
 * @file PhysConst.hpp
 *\class PhysConst
 *      PhysConst reads particle properties from an xml file. And provides
 *      it to the framework via a singleton structure. The structure of
 *      the xml file is defined in particleSchema.xsd. It is also intended
 *      to store other physical constants in this way.
 */

#ifndef PHYSCONST_HPP_
#define PHYSCONST_HPP_

#include <iostream>
#include <vector>
#include <Core/Parameter.hpp>

namespace COMPWA {
class PhysConst
{
public:
	//! returns existing instance of PhysConst, or creates a new one
	static PhysConst* instance(){
		if(!inst) inst = new PhysConst();
		return inst;
	}
	//! get particle mass by id
	double getMass(int);
	//! get particle mass by name
	double getMass(std::string);
	//! get particle decay width by id
	double getWidth(int);
	//! get particle decay width by name
	double getWidth(std::string);
	//! get particle spin by id
	unsigned int getJ(int);
	//! get particle spin by name
	unsigned int getJ(std::string);
	//! get particle parity by id
	bool getP(int);
	//! get particle partity by name
	bool getP(std::string);
	//! get particle charge by id
	bool getC(int);
	//! get particle charge by name
	bool getC(std::string);
	//! get particle name by particle id
	std::string getName(int);
	//! get particle id by particle name
	int getId(std::string);

	//! Get value of physical constant at position @pos
	double getConstValue(int pos);
	//! Get error of physical constant at position @pos
	double getConstError(int pos);
	//! Get value of physical constant @name
	double getConstValue(std::string name);
	//! Get error of physical constant @name
	double getConstError(std::string name);

private:
	//standart constructor, destructor and copy constructor are declared private, so that they are
	//not automatically generated by the compiler
	PhysConst();
	~PhysConst(){};
	PhysConst(PhysConst const&){flag_readFile=1;};

	static PhysConst* inst;
	int findConstant(std::string);
	int findParticle(std::string);
	int findParticle(int);

	void readFile();

	bool flag_readFile;
	std::string particleFileName;
	std::string particleDefaultFileName;
	std::string constantFileName;
	std::string constantDefaultFileName;
	std::vector<std::string> name;//TODO: use a particle class to store information
	std::vector<int> id;
	std::vector<double> mass;
	std::vector<double> width;
	std::vector<unsigned int> J;
	std::vector<int> P;
	std::vector<int> C;
	std::vector<std::string> nameConst;
	std::vector<double> valueConst;
	std::vector<double> errorConst;
};

}

#endif /* PHYSCONST_HPP_ */
