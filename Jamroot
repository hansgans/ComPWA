########### ComPWA Jamroot #############
import os ;
import path ;

path-constant TOP : . ;

# -------- Configure BOOST
import boost ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
using boost : 1.54 :
    <include>$(BOOST_ROOT)/include
    <library>$(BOOST_ROOT)/lib
    <layout>system
;
#boost.use-project 1.54 ; #specify boost version
boost.use-project ;

# -------- Configure ROOT
import root ;
local ROOTSYS = [ os.environ ROOTSYS ] ;
local rootlibdir = [ SHELL "$(ROOTSYS)/bin/root-config --libdir" ] ;
local rootlibs = [ SHELL "$(ROOTSYS)/bin/root-config --libs" ] ;
local rootincdir = [ SHELL "$(ROOTSYS)/bin/root-config --incdir" ] ;
local ROOT_INC_PATH = [ MATCH "(.*)[\n]" : $(rootincdir) ] ;
local ROOT_LIB_PATH = [ MATCH "(.*)[\n]" : $(rootlibdir) ] ;
#local ROOTLIBS = [ MATCH "(.*)[\n]" : $(rootlibs) ] ;
using root : :
    <include>$(ROOT_INC_PATH)
    <library>$(ROOT_LIB_PATH)
;
root.use-project ;

# -------- Configure GSL
local GSL_ROOT = [ os.environ GSL_ROOT ] ;
import gsl ;
using gsl : :
    <include>$(GSL_ROOT)/include
    <library>$(GSL_ROOT)/lib
;
gsl.use-project ;
#lib gsl : : <name>gsl <search>$(GSL)/lib : : <include>$(GSL)/include ; 
#explicit gsl ;
#lib gslcblas : : <name>gslcblas <search>$(GSL)/lib : : <include>$(GSL)/include ; 
#explicit gslcblas ;

# -------- Configure QFT
local QFT_ROOT = [ os.environ QFT ] ;
lib qft++ : : <name>qft++ <search>$(QFT_ROOT)/lib : : <include>$(QFT_ROOT)/include ; 

# -------- Configure MINUIT2
local MINUIT2_ROOT = [ os.environ ROOTSYS ] ;
import minuit2 ;
using minuit2 : :
    <include>$(ROOT_INC_PATH)
    <library>$(ROOT_LIB_PATH)
;
minuit2.use-project ;

# -------- Configure GENEVA
local GENEVA_ROOT = [ os.environ GENEVA ] ;
import geneva ;
using geneva : :
    <include>$(GENEVA_ROOT)/include
    <library>$(GENEVA_ROOT)/lib
;
#genva.use-project ;

# ---------- ComPWA ----------------
project ComPWA 
	: requirements 
	  <include>.
	  <cxxflags>-ftemplate-depth-256
	  <cxxflags>-std=c++0x
	  <cxxflags>-fPIC
	  <cxxflags>-DBOOST_SPIRIT_USE_PHOENIX_V3
	  <warnings>off
	  
	  #Static linking of std lib. In case that different 
	  #compiler versions are used we are on the safe side
	  #<toolset>gcc:<linkflags>-static-libgcc 
	  #<toolset>gcc:<linkflags>-static-libstdc++

      <library>/boost//system
      <library>/boost//log #Logging is needed by all libraries

    : default-build release
    : usage-requirements #flags are automatically added to depended projects
      <include>.
      <define>BOOST_LOG_DYN_LINK
      <cxxflags>-std=c++0x
	  <cxxflags>-fPIC
      <cxxflags>-DBOOST_SPIRIT_USE_PHOENIX_V3
      
;


# This is the layout of the complete project tree. The configure.py script will comment/uncomment the following constant definitions
# disabling/enabling the appropriate subprojects. Of course the appropriate if statements have to be inserted around build-project rules
# and library sources etc...

constant build_test : 0 ;

constant build_Physics : 1 ;
constant build_AmplitudeSum : 1 ;
constant build_DPKinematics : 1 ;
constant build_BreitWigner : 1 ;
constant build_HelicityAmplitude : 1 ;

constant build_DataReader : 1 ;
constant build_RootReader : 1 ;
constant build_AsciiReader : 1 ;

constant build_Estimator : 1 ;
constant build_ChiOneD : 1 ;
constant build_MinLogLH : 1 ;
constant build_SliceFit : 1 ;

constant build_Optimizer : 1 ;
constant build_Minuit2 : 1 ;
constant build_Geneva : 0 ;

# core should always be built
build-project Core ;
if $(build_test) && $(build_test) != 0 {
  build-project test ;
}
if $(build_Physics) && $(build_Physics) != 0 {
  build-project Physics ;
}
if $(build_DataReader) && $(build_DataReader) != 0 {
  build-project DataReader ;
}
if $(build_Estimator) && $(build_Estimator) != 0 {
  build-project Estimator ;
}
if $(build_Optimizer) && $(build_Optimizer) != 0 {
  build-project Optimizer ;
  if $(build_Minuit2) && $(build_Minuit2) != 0 {
	path-constant MINUIT2 : [ os.environ MINUIT2 ] ;
  }
  if $(build_Geneva) && $(build_Geneva) != 0 {
	path-constant GENEVA : [ os.environ GENEVA ] ;
  }
}

#Build documentation module
#build-project doc ;
